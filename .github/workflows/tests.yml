name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: verveq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run backend tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/verveq_test
        JWT_SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
      run: |
        cd backend
        python -m pytest ../tests/backend/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload backend coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage-${{ matrix.python-version }}
        path: backend/htmlcov/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests with coverage
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Upload frontend coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage-${{ matrix.node-version }}
        path: coverage/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: verveq_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start backend server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/verveq_e2e
        JWT_SECRET_KEY: e2e-test-secret-key
        ENVIRONMENT: test
      run: |
        cd backend
        python run.py &
        sleep 5  # Wait for server to start
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e
    
    - name: Upload E2E test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: tests/e2e/results/

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy
    
    - name: Check Python code formatting
      run: |
        cd backend
        black --check .
        isort --check-only .
    
    - name: Run type checking
      run: |
        cd backend
        mypy . --ignore-missing-imports

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, code-quality]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.backend-tests.result }}" != "success" ] || 
           [ "${{ needs.frontend-tests.result }}" != "success" ] || 
           [ "${{ needs.code-quality.result }}" != "success" ]; then
          echo "One or more required jobs failed"
          exit 1
        else
          echo "All required jobs passed successfully"
        fi